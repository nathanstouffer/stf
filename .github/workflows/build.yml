name: build

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Cancel all in-progress and queued jobs in the matrix if any job in the matrix fails
      fail-fast: true

      # Set up a matrix to run the different configurations:
      matrix:
        os: [ubuntu-latest] # [ubuntu-latest, windows-latest]
        build_type: [Coverage] # [Debug, Release, Coverage]
        c_compiler: [gcc, clang, cl]
        include:
          # - os: windows-latest
          #   c_compiler: cl
          #   cpp_compiler: cl
          # - os: ubuntu-latest
          #   c_compiler: gcc
          #   cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - c_compiler: gcc
            build_type: Coverage
          - c_compiler: cl
            build_type: Coverage

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "tests-output-dir=${{ github.workspace }}/build/tests/stf" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}/code

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      # Use this to set up an open ssh debugging session with CI
      # - name: Setup upterm session
      #   uses: lhotari/action-upterm@v1

      - name: Compute Code Coverage
        if: ${{ matrix.build_type == 'Coverage' }}
        working-directory: ${{ steps.strings.outputs.tests-output-dir }}
        ## Execute test coverage
        run: |
          llvm-profdata-14 merge -sparse default.profraw -o tests.profdata
          llvm-cov-14 show tests -instr-profile=tests.profdata > coverage.txt

      - name: Upload coverage report
        if: ${{ matrix.build_type == 'Coverage' }}
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: ${{ steps.strings.outputs.tests-output-dir }}/coverage.txt
          fail_ci_if_error: true
