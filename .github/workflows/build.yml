name: build

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Cancel all in-progress and queued jobs in the matrix if any job in the matrix fails
      fail-fast: false

      # Set up a matrix to run the different configurations:
      matrix:
        build_type: [Debug, RelWithDebInfo, Release, MinSizeRel]
        cpp_compiler: [cl, g++, clang++]
        os: [windows-2022, ubuntu-24.04, macos-14]
        exclude:
          # exclude incompatible operating systems and compilers
          - os: windows-2022
            cpp_compiler: clang++
          - os: ubuntu-24.04
            cpp_compiler: cl
          - os: macos-14
            cpp_compiler: cl
          - os: macos-14
            cpp_compiler: g++
        include:
          # for a particular cpp compiler, specify the c compiler
          - cpp_compiler: cl
            c_compiler: cl
          - cpp_compiler: g++
            c_compiler: gcc
          - cpp_compiler: clang++
            c_compiler: clang
          # for a particular operating system and compiler, specify the generator
          - os: windows-2022
            cpp_compiler: cl
            generator: Visual Studio 17 2022
          - os: windows-2022
            cpp_compiler: g++
            generator: MinGW Makefiles
          - os: ubuntu-24.04
            generator: Unix Makefiles
          - os: macos-14
            generator: Unix Makefiles
          # add the coverage build type
          # - build_type: Coverage
          #   cpp_compiler: clang++
          #   c_compiler: clang
          #   os: ubuntu-24.04
          #   generator: Unix Makefiles

    steps:
      - name: checkout
        uses: actions/checkout@v3

      # Use this to set up an open ssh debugging session with CI
      # - name: Setup ssh session
      #   uses: lhotari/action-upterm@v1

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "src-dir=${{ github.workspace }}/code/src" >> "$GITHUB_OUTPUT"
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "tests-output-dir=${{ github.workspace }}/build/code/tests/stf" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -G "${{ matrix.generator }}"
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Compute Code Coverage
        if: ${{ matrix.build_type == 'Coverage' }}
        working-directory: ${{ steps.strings.outputs.tests-output-dir }}
        ## Execute test coverage
        run: |
          ./tests
          llvm-profdata-18 merge default.profraw -o tests.profdata
          llvm-cov-18 show tests -instr-profile=tests.profdata -show-instantiation-summary ${{ steps.strings.outputs.src-dir }} > coverage-lines.txt
          llvm-cov-18 report tests -instr-profile=tests.profdata -show-instantiation-summary ${{ steps.strings.outputs.src-dir }} > coverage-files.txt

      - name: Upload coverage to github
        if: ${{ matrix.build_type == 'Coverage' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: ${{ steps.strings.outputs.tests-output-dir }}/coverage-*.txt

      - name: Upload coverage to codecov
        if: ${{ matrix.build_type == 'Coverage' }}
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: ${{ steps.strings.outputs.tests-output-dir }}/coverage-lines.txt
          fail_ci_if_error: true

  docs:
    runs-on: "ubuntu-24.04"

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Install Doxygen
        run: sudo apt-get install doxygen graphviz -y

      - name: Configure CMake
        run: cmake -B ${{ github.workspace }}/build -S ${{ github.workspace }}

      - name: Generate docs
        run: cmake --build ${{ github.workspace }}/build --target docs

      # TODO: possibly host docs on github pages (helpful link: https://github.com/DenverCoder1/doxygen-github-pages-action)

